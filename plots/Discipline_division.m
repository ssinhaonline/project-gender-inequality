%% Import data from text file.
% Script for importing data from the following text file:
%
%    /home/datalab01/Desktop/Souradeep_Docs/Thesis/project-gender-inequality/fixtures/all_csv/Displine_division.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/02/09 17:26:25

%% Initialize variables.
filename = '/home/datalab01/Desktop/Souradeep_Docs/Thesis/project-gender-inequality/fixtures/all_csv/Displine_division.csv';
delimiter = ',';
startRow = 2;

%% Format string for each line of text:
%   column1: text (%q)
%	column2: text (%q)
%   column3: text (%q)
%	column4: text (%q)
%   column5: text (%q)
%	column6: text (%q)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: text (%q)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%f%f%f%f%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
Displinedivision = table(dataArray{1:end-1}, 'VariableNames', {'id','city','state','discipline','university','gender','ovrquality','clarity','easiness','helpfulness','avggradereceived'});

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%% Initial tests

masterds = table2dataset(Displinedivision);
clear Displinedivision

dsCopy = masterds;
dsCopy.id = nominal(dsCopy.id);
dsCopy.city = nominal(dsCopy.city);
dsCopy.state = nominal(dsCopy.state);
dsCopy.discipline = nominal(dsCopy.discipline);
dsCopy.university = nominal(dsCopy.university);
dsCopy.gender = nominal(dsCopy.gender);
dsCopy.avggradereceived = ordinal(dsCopy.avggradereceived, {}, {'N/A', 'F', 'D-', 'D', 'D+', 'C-', 'C', 'C+', 'B-', 'B', 'B+', 'A-', 'A', 'A+'});

SortedDisciplines = sortrows(tabulate(dsCopy.discipline), -2);
NumberOfRows = size(SortedDisciplines, 1);
IndexItr = 1;
for RowItr = 1 : NumberOfRows
    if SortedDisciplines{RowItr, 2}(1) >= 1000
       IndicesOfRowsOfInterest(IndexItr) = RowItr;
       IndexItr = IndexItr + 1;
    else
       break;
    end
end

BestDisciplines = SortedDisciplines(IndicesOfRowsOfInterest);
BestDisciplinesLength = size(BestDisciplines, 2);

clear NumberOfRows IndexItr RowItr SortedDisciplines BestDisciplinesDim IndicesOfRowsOfInterest

for RowIter = 1 : BestDisciplinesLength
    
    thisDiscipline = BestDisciplines(RowIter);
    mini_dsCopyMaleSubset = dsCopy(and((dsCopy.discipline == thisDiscipline), (dsCopy.gender == 'M')), :);
    mini_dsCopyFemaleSubset = dsCopy(and((dsCopy.discipline == thisDiscipline), (dsCopy.gender == 'F')), :);
    
    m_mean_ovr = mean(mini_dsCopyMaleSubset.ovrquality);
    f_mean_ovr = mean(mini_dsCopyFemaleSubset.ovrquality);
    
    m_mean_clar = mean(mini_dsCopyMaleSubset.clarity);
    f_mean_clar = mean(mini_dsCopyFemaleSubset.clarity);
    
    m_mean_ease = mean(mini_dsCopyMaleSubset.easiness);
    f_mean_ease = mean(mini_dsCopyFemaleSubset.easiness);
    
    m_mean_help = mean(mini_dsCopyMaleSubset.helpfulness);
    f_mean_help = mean(mini_dsCopyFemaleSubset.helpfulness);
    
    tempDisciplines(RowIter) = thisDiscipline;
    NumMales(RowIter) = size(mini_dsCopyMaleSubset, 1);
    NumFemales(RowIter) = size(mini_dsCopyFemaleSubset, 1);
    TotalDisciplineSize(RowIter) = size(mini_dsCopyMaleSubset, 1) + size(mini_dsCopyFemaleSubset, 1);
    Imbalance(RowIter) = NumFemales(RowIter) / NumMales(RowIter);
    
    MeanMalesOvr(RowIter) = m_mean_ovr;
    MeanFemalesOvr(RowIter) = f_mean_ovr;
    OvrDisparity(RowIter) = (f_mean_ovr - m_mean_ovr) / (f_mean_ovr + m_mean_ovr);
    
    MeanMalesClar(RowIter) = m_mean_clar;
    MeanFemalesClar(RowIter) = f_mean_clar;
    ClarDisparity(RowIter) = (f_mean_clar - m_mean_clar) / (f_mean_clar + m_mean_clar);
    
    MeanMalesEase(RowIter) = m_mean_ease;
    MeanFemalesEase(RowIter) = f_mean_ease;
    EaseDisparity(RowIter) = (f_mean_ease - m_mean_ease) / (f_mean_ease + m_mean_ease);
    
    MeanMalesHelp(RowIter) = m_mean_help;
    MeanFemalesHelp(RowIter) = f_mean_help;
    HelpDisparity(RowIter) = (f_mean_help - m_mean_help) / (f_mean_help + m_mean_help);
    
end
    
clear mini_dsCopyFemaleSubset mini_dsCopyMaleSubset m_mean_ovr f_mean_ovr f_mean_clar m_mean_clar m_mean_ease f_mean_ease
clear m_mean_help f_mean_help thisDiscipline RowIter BestDisciplines BestDisciplinesLength

Disciplines = transpose(tempDisciplines);

dsDiscipline = dataset(Disciplines(:), NumMales(:), NumFemales(:), TotalDisciplineSize(:), Imbalance(:), MeanMalesOvr(:), MeanFemalesOvr(:), OvrDisparity(:), MeanMalesClar(:), MeanFemalesClar(:), ClarDisparity(:), MeanMalesEase(:), MeanFemalesEase(:), EaseDisparity(:), MeanMalesHelp(:), MeanFemalesHelp(:), HelpDisparity(:));
dsDiscipline.Properties.VarNames = {'Disciplines', 'NumMales', 'NumFemales', 'TotalDisciplineSize', 'Imbalance', 'MeanMalesOvr', 'MeanFemalesOvr', 'OvrDisparity', 'MeanMalesClar', 'MeanFemalesClar', 'ClarDisparity', 'MeanMalesEase', 'MeanFemalesEase', 'EaseDisparity', 'MeanMalesHelp', 'MeanFemalesHelp', 'HelpDisparity'};
clear tempDisciplines Disciplines NumMales NumFemales TotalDisciplineSize Imbalance MeanMalesOvr MeanFemalesOvr OvrDisparity MeanMalesClar MeanFemalesClar ClarDisparity MeanMalesEase MeanFemalesEase EaseDisparity MeanMalesHelp MeanFemalesHelp HelpDisparity
clear masterds


%% Plotting female average scores against male population in disciplines

dsDisc_SortMalesSizes = sortrows(dsDiscipline, {'NumMales'});
yMat = [dsDisc_SortMalesSizes.MeanFemalesOvr(:), dsDisc_SortMalesSizes.MeanFemalesClar(:), dsDisc_SortMalesSizes.MeanFemalesEase(:), dsDisc_SortMalesSizes.MeanFemalesHelp(:)];
x = dsDisc_SortMalesSizes.NumMales;
plot_props_score_v_size(x, yMat, 'M', 'F');
clear dsDisc_SortMalesSizes yMat x

%% Plotting female average scores against male population in disciplines

dsDisc_SortFemalesSizes = sortrows(dsDiscipline, {'NumFemales'});
yMat = [dsDisc_SortFemalesSizes.MeanMalesOvr(:), dsDisc_SortFemalesSizes.MeanMalesClar(:), dsDisc_SortFemalesSizes.MeanMalesEase(:), dsDisc_SortFemalesSizes.MeanMalesHelp(:)];
x = dsDisc_SortFemalesSizes.NumFemales;
plot_props_score_v_size(x, yMat, 'F', 'M');
clear dsDisc_SortFemalesSizes yMat x
